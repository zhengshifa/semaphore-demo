---
# 通用部分
- block:
  - name: 下载安装包
    get_url:
      url: "{{ download_url }}"
      dest: "/tmp/"
      timeout: 120  # 增加超时时间为 30 秒
      mode: '0644'
    throttle: 1  # 限制同一主机上的任务并发数为 1
    register: download_result

  - name: 显示实际下载路径
    debug:
      msg: "文件下载到 {{ download_result.dest }}"

  - name: 解压源码包
    unarchive:
      src: "{{ download_result.dest }}"
      dest: "{{ install_dir | dirname }}"
      mode: '0755'                # 设置文件权限
      owner: "{{ user }}"  # 设置属主
      group: "{{ group }}"  # 设置属组
      remote_src: yes
    throttle: 1  # 限制同一主机上的任务并发数为 1

# nginx 
- block: 
  - name: 配置和编译安装
    shell: |
      cd {{ install_dir | dirname }}/{{ service }}-{{ version }} && ./configure {{ nginx_configure_options }}
      make && make install
    throttle: 1  # 限制同一主机上的任务并发数为 1
  - name: 创建链接目录
    file:
      src: "{{ install_dir | dirname }}/{{ version }}"
      dest: "{{ install_dir }}"
      state: link
      force: yes
      owner: "{{ user }}"  # 设置属主
      group: "{{ group }}"  # 设置属组
  when: service == "nginx"

# haproxy
- block: 
  - name: 配置和编译安装
    shell: |
      cd {{ install_dir | dirname }}/{{ service }}-{{ version }}
      make TARGET=linux-glibc USE_OPENSSL=1 USE_ZLIB=1 USE_PCRE=1 USE_SYSTEMD=1 && make install PREFIX={{ install_dir | dirname }}/{{ version }}
    throttle: 1  # 限制同一主机上的任务并发数为 1
  - name: 创建链接目录
    file:
      src: "{{ install_dir | dirname }}/{{ version }}"
      dest: "{{ install_dir }}"
      state: link
      force: yes
      owner: "{{ user }}"  # 设置属主
      group: "{{ group }}"  # 设置属组
  when: service == "haproxy"

# mysql
- block: 
  - name: 移动应用到安装目录
    shell: |
     rm -rf  {{ install_dir | dirname }}/{{ version }} &&  mv  {{ install_dir | dirname }}/mysql-{{ version }}-linux-glibc2.12-x86_64 {{ install_dir | dirname }}/{{ version }}

  - name: 创建链接目录
    file:
      src: "{{ install_dir | dirname }}/{{ version }}"
      dest: "{{ install_dir }}"
      state: link
      force: yes
      owner: "{{ user }}"  # 设置属主
      group: "{{ group }}"  # 设置属组

  - name: 初始化数据库
    command: "{{ install_dir }}/bin/mysqld --initialize-insecure --user={{ user}}  --basedir={{ install_dir }} --datadir={{ data_dir }}"
    become: yes

  - name: 加载mysql配置
    include_tasks: config.yml

  - name: 加载服务配置
    include_tasks: service.yml

  # 数据库初始化任务
  - name: 设置 root 密码
    shell: |
      {{ install_dir }}/bin/mysqladmin -u root password {{ mysql_root_password }} -S {{ data_dir }}/mysql.sock
    ignore_errors: yes
    register: set_password
    changed_when: "'already' not in set_password.stderr"
    no_log: true

  - name: 执行安全加固
    shell: |
      {{ install_dir }}/bin/mysql -u root -p"{{ mysql_root_password }}" -e "
        DELETE FROM mysql.user WHERE User='';
        DROP DATABASE IF EXISTS test;
        FLUSH PRIVILEGES;"
    no_log: true

  - name: 创建应用数据库
    shell: |
      {{ install_dir }}/bin/mysql -u root -p"{{ mysql_root_password }}" -e "
        CREATE DATABASE IF NOT EXISTS {{ item.name }}
        CHARACTER SET {{ item.encoding | default('utf8mb4') }}
        COLLATE {{ item.collation | default('utf8mb4_general_ci') }};"
    no_log: true
    loop: "{{ mysql_databases }}"
    when: mysql_databases | length > 0

  - name: 创建数据库用户
    shell: |
      {{ install_dir }}/bin/mysql -u root -p"{{ mysql_root_password }}" -e "
        CREATE USER IF NOT EXISTS '{{ item.name }}'@'{{ item.host | default('%') }}' 
        IDENTIFIED BY '{{ item.password }}';
        GRANT {{ item.priv }} ON *.* TO '{{ item.name }}'@'{{ item.host | default('%') }}';
        FLUSH PRIVILEGES;"
    no_log: true
    loop: "{{ mysql_users }}"
    when: mysql_users | length > 0
  when: service == "mysql"

- name: 递归设置子目录和文件的属主和属组
  file:
    path: "{{ install_dir | dirname }}/{{ version }}"  # 解压后的目标目录
    owner: "{{ user }}"  # 设置属主
    group: "{{ group }}"  # 设置属组
    recurse: yes  # 递归设置子目录和文件
    mode: '0755'